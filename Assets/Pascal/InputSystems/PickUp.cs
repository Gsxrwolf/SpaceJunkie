//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Pascal/InputSystems/PickUp.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PickUp: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PickUp()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PickUp"",
    ""maps"": [
        {
            ""name"": ""MouseInput"",
            ""id"": ""b29205d8-0098-4cb0-8349-8ba1843f022f"",
            ""actions"": [
                {
                    ""name"": ""MousePress"",
                    ""type"": ""Button"",
                    ""id"": ""d02519e3-5ba6-46ab-a16e-ba62423940c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""726c278c-80d5-492b-a62c-9321a0f1d692"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MouseInput
        m_MouseInput = asset.FindActionMap("MouseInput", throwIfNotFound: true);
        m_MouseInput_MousePress = m_MouseInput.FindAction("MousePress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseInput
    private readonly InputActionMap m_MouseInput;
    private List<IMouseInputActions> m_MouseInputActionsCallbackInterfaces = new List<IMouseInputActions>();
    private readonly InputAction m_MouseInput_MousePress;
    public struct MouseInputActions
    {
        private @PickUp m_Wrapper;
        public MouseInputActions(@PickUp wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePress => m_Wrapper.m_MouseInput_MousePress;
        public InputActionMap Get() { return m_Wrapper.m_MouseInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseInputActions set) { return set.Get(); }
        public void AddCallbacks(IMouseInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseInputActionsCallbackInterfaces.Add(instance);
            @MousePress.started += instance.OnMousePress;
            @MousePress.performed += instance.OnMousePress;
            @MousePress.canceled += instance.OnMousePress;
        }

        private void UnregisterCallbacks(IMouseInputActions instance)
        {
            @MousePress.started -= instance.OnMousePress;
            @MousePress.performed -= instance.OnMousePress;
            @MousePress.canceled -= instance.OnMousePress;
        }

        public void RemoveCallbacks(IMouseInputActions instance)
        {
            if (m_Wrapper.m_MouseInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseInputActions @MouseInput => new MouseInputActions(this);
    public interface IMouseInputActions
    {
        void OnMousePress(InputAction.CallbackContext context);
    }
}
